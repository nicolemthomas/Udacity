{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "In this project, you will build a neural network of your own design to evaluate the CIFAR-10 dataset.\n",
    "Our target accuracy is 70%, but any accuracy over 50% is a great start.\n",
    "Some of the benchmark results on CIFAR-10 include:\n",
    "\n",
    "78.9% Accuracy | [Deep Belief Networks; Krizhevsky, 2010](https://www.cs.toronto.edu/~kriz/conv-cifar10-aug2010.pdf)\n",
    "\n",
    "90.6% Accuracy | [Maxout Networks; Goodfellow et al., 2013](https://arxiv.org/pdf/1302.4389.pdf)\n",
    "\n",
    "96.0% Accuracy | [Wide Residual Networks; Zagoruyko et al., 2016](https://arxiv.org/pdf/1605.07146.pdf)\n",
    "\n",
    "99.0% Accuracy | [GPipe; Huang et al., 2018](https://arxiv.org/pdf/1811.06965.pdf)\n",
    "\n",
    "98.5% Accuracy | [Rethinking Recurrent Neural Networks and other Improvements for ImageClassification; Nguyen et al., 2020](https://arxiv.org/pdf/2007.15161.pdf)\n",
    "\n",
    "Research with this dataset is ongoing. Notably, many of these networks are quite large and quite expensive to train. \n",
    "\n",
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "## This cell contains the essential imports you will need – DO NOT CHANGE THE CONTENTS! ##\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the Dataset\n",
    "\n",
    "Specify your transforms as a list first.\n",
    "The transforms module is already loaded as `transforms`.\n",
    "\n",
    "CIFAR-10 is fortunately included in the torchvision module.\n",
    "Then, you can create your dataset using the `CIFAR10` object from `torchvision.datasets` ([the documentation is available here](https://pytorch.org/docs/stable/torchvision/datasets.html#cifar)).\n",
    "Make sure to specify `download=True`! \n",
    "\n",
    "Once your dataset is created, you'll also need to define a `DataLoader` from the `torch.utils.data` module for both the train and the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n"
     ]
    }
   ],
   "source": [
    "# Define transforms\n",
    "## YOUR CODE HERE ##\n",
    "from torchvision import datasets, transforms\n",
    "\n",
    "photo_size = 32\n",
    "\n",
    "transform = transforms.Compose([transforms.RandomRotation(30),\n",
    "                                transforms.Resize(photo_size),\n",
    "                                transforms.ToTensor(),\n",
    "                                transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))])\n",
    "#                                 transforms.RandomRotation(30),\n",
    "#                                 transforms.RandomPerspective(),\n",
    "#                                 transforms.ColorJitter(brightness=.5, hue=.3),\n",
    "\n",
    "test_transform = transforms.Compose([transforms.RandomRotation(30),\n",
    "                                     transforms.Resize(photo_size),\n",
    "                                transforms.ToTensor()])\n",
    "\n",
    "# Create training set and define training dataloader\n",
    "## YOUR CODE HERE ##\n",
    "trainset = datasets.CIFAR10(root= '~/.pytorch/CIFAR10_data/', train =True, transform = transform, download = True)\n",
    "trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle = True)\n",
    "                    \n",
    "# Create test set and define test dataloader\n",
    "## YOUR CODE HERE ##\n",
    "testset = datasets.CIFAR10(root= '~/.pytorch/CIFAR10_data/', train =False, transform = transform, download = True)\n",
    "testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle = True)\n",
    "\n",
    "# The 10 classes in the dataset\n",
    "classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explore the Dataset\n",
    "Using matplotlib, numpy, and torch, explore the dimensions of your data.\n",
    "\n",
    "You can view images using the `show5` function defined below – it takes a data loader as an argument.\n",
    "Remember that normalized images will look really weird to you! You may want to try changing your transforms to view images.\n",
    "Typically using no transforms other than `toTensor()` works well for viewing – but not as well for training your network.\n",
    "If `show5` doesn't work, go back and check your code for creating your data loaders and your training/test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def show5(img_loader):\n",
    "    dataiter = iter(img_loader)\n",
    "    \n",
    "    batch = next(dataiter)\n",
    "    labels = batch[1][0:5]\n",
    "    images = batch[0][0:5]\n",
    "    for i in range(5):\n",
    "        print(classes[labels[i]])\n",
    "    \n",
    "        image = images[i].numpy()\n",
    "        plt.imshow(image.T)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bird\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "car\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "plane\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "car\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ship\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Explore data\n",
    "## YOUR CODE HERE ##\n",
    "show5(trainloader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([64, 3, 32, 32])\n"
     ]
    }
   ],
   "source": [
    "dataiter = iter(trainloader)\n",
    "images, labels = dataiter.next()\n",
    "print(images.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build your Neural Network\n",
    "Using the layers in `torch.nn` (which has been imported as `nn`) and the `torch.nn.functional` module (imported as `F`), construct a neural network based on the parameters of the dataset. \n",
    "Feel free to construct a model of any architecture – feedforward, convolutional, or even something more advanced!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "## YOUR CODE HERE ##\n",
    "# Ref: part 5 code\n",
    "\n",
    "class Classifier(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.fc1 = nn.Linear(3*(photo_size**2), 255)\n",
    "        self.fc2 = nn.Linear(255, 128)\n",
    "        self.fc3 = nn.Linear(128, 64)\n",
    "        self.fc4 = nn.Linear(64, 10)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        # make sure input tensor is flattened\n",
    "        x = x.view(x.shape[0], -1)\n",
    "        \n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = F.relu(self.fc2(x))\n",
    "        x = F.relu(self.fc3(x))\n",
    "        x = F.log_softmax(self.fc4(x), dim=1)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Specify a loss function and an optimizer, and instantiate the model.\n",
    "\n",
    "If you use a less common loss function, please note why you chose that loss function in a comment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Classifier(\n",
       "  (fc1): Linear(in_features=3072, out_features=255, bias=True)\n",
       "  (fc2): Linear(in_features=255, out_features=128, bias=True)\n",
       "  (fc3): Linear(in_features=128, out_features=64, bias=True)\n",
       "  (fc4): Linear(in_features=64, out_features=10, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## YOUR CODE HERE ##\n",
    "model = Classifier()\n",
    "\n",
    "criterion = nn.NLLLoss()\n",
    "\n",
    "# Only train the classifier parameters, feature parameters are frozen\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "# model.to(device)\n",
    "model.to('cuda')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running your Neural Network\n",
    "Use whatever method you like to train your neural network, and ensure you record the average loss at each epoch. \n",
    "Don't forget to use `torch.device()` and the `.to()` method for both your model and your data if you are using GPU!\n",
    "\n",
    "If you want to print your loss during each epoch, you can use the `enumerate` function and print the loss after a set number of batches. 250 batches works well for most people!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fd1609c8fef043f59ce8a72214d8f750",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Train:   0%|          | 0/782 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5ced779545bb49f096b6e6374c225a95",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Test:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 1/5..Train loss: 1.331..Test loss: 1.378..Test accuracy: 0.509\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9fa4c23b63954efcad2a112a1ffdb944",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Train:   0%|          | 0/782 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "66978f48f3844c9ab1b199eee396e60b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Test:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 2/5..Train loss: 0.568..Test loss: 1.396..Test accuracy: 0.507\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ef3a31af2b19459c8931d03e19129fac",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Test:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 2/5..Train loss: 1.879..Test loss: 1.371..Test accuracy: 0.511\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e59e5b3403e74f72b2e65b87312e657a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Train:   0%|          | 0/782 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "93921530bc744e99a178d806daddd1aa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Test:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 3/5..Train loss: 1.119..Test loss: 1.356..Test accuracy: 0.518\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "58df68c25d664d9e81b8bcd3b7d8fa6e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Train:   0%|          | 0/782 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6edd4b078965427ca1549410dd697c40",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Test:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 4/5..Train loss: 0.384..Test loss: 1.381..Test accuracy: 0.517\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "44dad91fd08f4ad1a49f14a490006831",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Test:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 4/5..Train loss: 1.656..Test loss: 1.355..Test accuracy: 0.520\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4e81c72a2ee74789985cf331c21077fc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Train:   0%|          | 0/782 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "900659c0cc4c404ebc31033f790cc9ab",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Test:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 5/5..Train loss: 0.926..Test loss: 1.354..Test accuracy: 0.520\n"
     ]
    }
   ],
   "source": [
    "## YOUR CODE HERE ##\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "\n",
    "epochs = 5\n",
    "steps = 0\n",
    "print_every = 500\n",
    "\n",
    "device = torch.device(\"cuda\")\n",
    "train_losses, test_losses = [], []\n",
    "for e in range(epochs):\n",
    "    running_loss = 0\n",
    "    for images, labels in tqdm(trainloader, desc=\"Train\"):\n",
    "        steps +=1\n",
    "        \n",
    "        images, labels = images.to(device), labels.to(device)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        \n",
    "        log_ps = model.forward(images)\n",
    "        loss = criterion(log_ps, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        \n",
    "        if steps % print_every ==0:\n",
    "            test_loss = 0 \n",
    "            accuracy = 0\n",
    "            model.eval()\n",
    "            \n",
    "            with torch.no_grad():\n",
    "                for images, labels in tqdm(testloader, desc=\"Test\"):\n",
    "\n",
    "                    images, labels = images.to(device), labels.to(device)\n",
    "                    logps = model.forward(images)\n",
    "                    batch_loss = criterion(logps, labels)\n",
    "                    test_loss += batch_loss.item()\n",
    "\n",
    "                    #Calculate accuracy \n",
    "                    ps = torch.exp(logps)\n",
    "                    top_ps, top_class = ps.topk(1, dim=1)\n",
    "\n",
    "                    equals = top_class == labels.view(*top_class.shape)\n",
    "                    accuracy += torch.mean(equals.type(torch.FloatTensor))\n",
    "            \n",
    "            train_losses.append(running_loss/print_every)\n",
    "            test_losses.append(test_loss/print_every)\n",
    "            print(f\"Epoch: {e+1}/{epochs}..\"\n",
    "                  f\"Train loss: {running_loss/print_every:.3f}..\"\n",
    "                  f\"Test loss: {test_loss/len(testloader):.3f}..\"\n",
    "                  f\"Test accuracy: {accuracy/len(testloader):.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the training loss (and validation loss/accuracy, if recorded)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1e4e1f755a0>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 248,
       "width": 372
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## YOUR CODE HERE ##\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "plt.plot(train_losses, label='Training loss')\n",
    "plt.plot(test_losses, label='Validation loss')\n",
    "plt.legend(frameon=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing your model\n",
    "Using the previously created `DataLoader` for the test set, compute the percentage of correct predictions using the highest probability prediction. \n",
    "\n",
    "If your accuracy is over 70%, great work! \n",
    "This is a hard task to exceed 70% on.\n",
    "\n",
    "If your accuracy is under 45%, you'll need to make improvements.\n",
    "Go back and check your model architecture, loss function, and optimizer to make sure they're appropriate for an image classification task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "## YOUR CODE HERE ##\n",
    "# We did this above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving your model\n",
    "Using `torch.save`, save your model for future loading."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "## YOUR CODE HERE ##\n",
    "torch.save(model.state_dict(), 'img_classifier.pth')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make a Recommendation\n",
    "\n",
    "Based on your evaluation, what is your recommendation on whether to build or buy? Explain your reasoning below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "**Double click this cell to modify it**\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
